#!/bin/lua

local xml2lua = dofile("libs/xml2lua.lua")
local handler = dofile("libs/tree.lua")

local x = os.execute





--[=[ DATABASE UPDATING AND LOADING ]=]--

local dbFiles = {            
	["Footholds"] = {1, "../db/core/footholds.lua"},        
	["Files Containing Usernames"] = {1, "../db/core/filescontainingusernames.lua"},   
	["Sensitive Directories"] = {1, "../db/core/sensitivedirectories.lua"},        
	["Web Server Detection"] = {1, "../db/core/webserverdetection.lua"},   
	["Vulnerable Files"] = {1, "../db/core/vulnerablefiles.lua"},         
	["Vulnerable Servers"] = {1, "../db/core/vulnerableservers.lua"},    
	["Error Messages"] = {1, "../db/core/errormessages.lua"},             
	["Files Containing Juicy Info"] = {1, "../db/core/filescontainingjuicyinfo.lua"},    
	["Files Containing Passwords"] = {1, "../db/core/filescontainingpasswords.lua"}, 
	["Sensitive Online Shopping Info"] = {1, "../db/core/sensitiveonlineshoppinginfo.lua"},    
	["Network or Vulnerability Data"] = {1, "../db/core/networkorvulnerabilitydata.lua"},    
	["Pages Containing Login Portals"] = {1, "../db/core/pagescontainingloginportals.lua"},  
	["Various Online Devices"] = {1, "../db/core/variousonlinedevices.lua"},       
	["Advisories and Vulnerabilities"] = {1, "../db/core/advisoriesandvulnerabilities.lua"}    
}

local function updateDB()
	x("cd $HOME && wget https://gitlab.com/exploit-database/exploitdb/-/raw/main/ghdb.xml?ref_type=heads -O db.xml")
	x("rm $HOME/db/core/*")
	local xmlDBFile = io.open("../db.xml", "r")
	local xmlDB = xmlDBFile:read("*all")
	xmlDBFile:close()
	xml2lua.parser(handler):parse(xmlDB)
	local entries = handler.root.ghdb.entry
	for _,file in pairs(dbFiles) do
		x("touch " .. file[2] .. " && echo \"return {\\n\" > " .. file[2])
		
	end
	for _,entry in pairs(entries) do
		local typeFile = io.open(dbFiles[entry.category][2], "a")
		typeFile:write("\n\n[" .. dbFiles[entry.category][1] .. "] = {")
		for listing, value in pairs(entry) do
			if type(value) ~= "table" then
				-- Wipe carriage returns
				local stringValue = tostring(value)
				local cleanedValue = ""
				local i = 1
				while i <= #stringValue do
					local c = string.sub(stringValue, i, i)
					local d = ""
					if c == "\r" then
						d = "\n"
					elseif c == "]" and i == #stringValue then
						d = "] "
					else
						d = c
					end
					cleanedValue = cleanedValue .. d
					i = i + 1
				end

				typeFile:write("\n        [\"" .. listing .. "\"] = [[" .. cleanedValue .. "]],")
			end
		end
		typeFile:write("\n},")
		typeFile:close()
		dbFiles[entry.category][1] = dbFiles[entry.category][1] + 1
	end
	for _,file in pairs(dbFiles) do
		x("echo \"\n\n}\" >> " .. file[2])
	end
end

PAGEDATABASE = {
	["categoryCount"] = 0,
	["categories"] = {}
}

local function extractDBtoPageFormat()
	for title, file in pairs(dbFiles) do
		PAGEDATABASE.categoryCount = PAGEDATABASE.categoryCount + 1
		local currentCategory = PAGEDATABASE.categoryCount
		PAGEDATABASE.categories[currentCategory] = {
			["name"] = title,
			["pageCount"] = 1,
			["entryCount"] = 1,
			["pages"] = {
				[1] = {}
			}
		}
		local fileContents = dofile(file[2])
		local i = 1
		local currentPage = 1
		local lastPageEntryCount = 1
		while i <= #fileContents do
			if lastPageEntryCount == 11 then
				PAGEDATABASE.categories[currentCategory].pageCount = PAGEDATABASE.categories[currentCategory].pageCount + 1
				currentPage = PAGEDATABASE.categories[currentCategory].pageCount
				table.insert(PAGEDATABASE.categories[currentCategory].pages, currentPage, {})
				lastPageEntryCount = 1
			end
			PAGEDATABASE.categories[currentCategory].pages[currentPage][tostring(i)] = fileContents[i]
			PAGEDATABASE.categories[currentCategory].entryCount = PAGEDATABASE.categories[currentCategory].entryCount + 1
			lastPageEntryCount = lastPageEntryCount + 1
			i = i + 1
		end
	end
end





--[=[ USER INTERFACE ]=]--

WIDTH = 0
local function setWidth()
	local temp = io.popen("tput cols")
	WIDTH = temp:read("*n")
	if WIDTH % 2 ~= 0 then
		WIDTH = WIDTH - 1
	end
	temp:close()
end

local function getNumRange(page)
	local num
	for key, val in pairs(page) do
		num = tonumber(key)
		break
	end
	if num % 10 == 0 then
		return num - 10
	else
		return math.floor(num / 10) * 10
	end
end

local function orderVisualPage(page)
	local new = {}
	local range = getNumRange(page)
	local i = 1
	while i <= 10 do
		table.insert(new,
		{
			["number"] = tostring(range + i),
			["data"] = page[tostring(range + i)]
		})
		i = i + 1
	end
	return new
end



local function title()
	setWidth()
	local p = ""
	local lines = ""

	for i = 1, (WIDTH - 52) / 2 do
		p = p .. " "
	end

	for i = 1, WIDTH - 2 do
		lines = lines .. ""
	end

	local logo = "" ..
"╔" .. lines ..                                                 "╗\n" ..
"║" ..p.. "      _____ _     _         _ _____                " ..p.. "║\n" ..
"║" ..p.. "     |_   _| |__ (_)_ __ __| | ____|   _  ___      " ..p.. "║\n" ..
"║" ..p.. "       | | | '_ \| | '__/ _` |  _|| | | |/ _ \     " ..p.. "║\n" ..
"║" ..p.. "       | | | | | | | | | (_| | |__| |_| |  __/     " ..p.. "║\n" ..
"║" ..p.. "       |_| |_| |_|_|_|  \__,_|_____\__, |\___|     " ..p.. "║\n" ..
"║" ..p.. "                                   |___/Search     " ..p.. "║\n" ..
"╠" .. lines ..                                                 "╣\n"
end
