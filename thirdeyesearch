#!/bin/lua

local xml2lua = dofile("libs/xml2lua.lua")
local handler = dofile("libs/tree.lua")

local x = os.execute

local function sleep(time)
	x("sleep " .. time)
end

local function clear()
	x("clear")
end

local function splitString(str, splitChar)
        local resultSplit = {}
        if splitChar == nil then
                splitChar = " "
        end
        if str and splitChar then
                for part in string.gmatch(str, "([^"..splitChar.."]+)") do
                        table.insert(resultSplit, part)
                end
        end
        return resultSplit
end




--[=[ DATABASE UPDATING AND LOADING ]=]--


-- All core database file locations
local dbFiles = {            
	["Footholds"] = {1, "../db/core/footholds.lua"},        
	["Files Containing Usernames"] = {1, "../db/core/filescontainingusernames.lua"},   
	["Sensitive Directories"] = {1, "../db/core/sensitivedirectories.lua"},        
	["Web Server Detection"] = {1, "../db/core/webserverdetection.lua"},   
	["Vulnerable Files"] = {1, "../db/core/vulnerablefiles.lua"},         
	["Vulnerable Servers"] = {1, "../db/core/vulnerableservers.lua"},    
	["Error Messages"] = {1, "../db/core/errormessages.lua"},             
	["Files Containing Juicy Info"] = {1, "../db/core/filescontainingjuicyinfo.lua"},    
	["Files Containing Passwords"] = {1, "../db/core/filescontainingpasswords.lua"}, 
	["Sensitive Online Shopping Info"] = {1, "../db/core/sensitiveonlineshoppinginfo.lua"},    
	["Network or Vulnerability Data"] = {1, "../db/core/networkorvulnerabilitydata.lua"},    
	["Pages Containing Login Portals"] = {1, "../db/core/pagescontainingloginportals.lua"},  
	["Various Online Devices"] = {1, "../db/core/variousonlinedevices.lua"},       
	["Advisories and Vulnerabilities"] = {1, "../db/core/advisoriesandvulnerabilities.lua"}    
}


-- Download the newest database from exploit.db and install it.
local function updateDB()
	x("cd $HOME && wget https://gitlab.com/exploit-database/exploitdb/-/raw/main/ghdb.xml?ref_type=heads -O db.xml")
	x("rm $HOME/db/core/*")
	local xmlDBFile = io.open("../db.xml", "r")
	local xmlDB = xmlDBFile:read("*all")
	xmlDBFile:close()
	xml2lua.parser(handler):parse(xmlDB)
	local entries = handler.root.ghdb.entry
	for _,file in pairs(dbFiles) do
		x("touch " .. file[2] .. " && echo \"return {\n\" > " .. file[2])
		
	end
	for _,entry in pairs(entries) do
		local typeFile = io.open(dbFiles[entry.category][2], "a")
		typeFile:write("\n\n[" .. dbFiles[entry.category][1] .. "] = {")
		for listing, value in pairs(entry) do
			if type(value) ~= "table" then
				-- Wipe carriage returns
				local stringValue = tostring(value)
				local cleanedValue = ""
				local i = 1
				while i <= #stringValue do
					local c = string.sub(stringValue, i, i)
					local d = ""
					if c == "\r" then
						d = "\n"
					elseif c == "]" and i == #stringValue then
						d = "] "
					else
						d = c
					end
					cleanedValue = cleanedValue .. d
					i = i + 1
				end

				typeFile:write("\n        [\"" .. listing .. "\"] = [[" .. cleanedValue .. "]],")
			end
		end
		typeFile:write("\n},")
		typeFile:close()
		dbFiles[entry.category][1] = dbFiles[entry.category][1] + 1
	end
	for _,file in pairs(dbFiles) do
		x("echo \"\n}\" >> " .. file[2])
	end
end


-- Stores all pages for the TUI
PAGEDATABASE = {
	["categoryCount"] = 0,
	["categories"] = {}
}


-- Format installed database into the page format for the TUI
local function extractDBtoPageFormat()
	for title, file in pairs(dbFiles) do
		PAGEDATABASE.categoryCount = PAGEDATABASE.categoryCount + 1
		local currentCategory = PAGEDATABASE.categoryCount
		PAGEDATABASE.categories[currentCategory] = {
			["name"] = title,
			["pageCount"] = 1,
			["entryCount"] = 1,
			["pages"] = {
				[1] = {}
			}
		}
		local fileContents = dofile(file[2])
		local i = 1
		local currentPage = 1
		local lastPageEntryCount = 1
		while i <= #fileContents do
			if lastPageEntryCount == 11 then
				PAGEDATABASE.categories[currentCategory].pageCount = PAGEDATABASE.categories[currentCategory].pageCount + 1
				currentPage = PAGEDATABASE.categories[currentCategory].pageCount
				table.insert(PAGEDATABASE.categories[currentCategory].pages, currentPage, {})
				lastPageEntryCount = 1
			end
			PAGEDATABASE.categories[currentCategory].pages[currentPage][tostring(i)] = fileContents[i]
			PAGEDATABASE.categories[currentCategory].entryCount = PAGEDATABASE.categories[currentCategory].entryCount + 1
			lastPageEntryCount = lastPageEntryCount + 1
			i = i + 1
		end
	end
end





--[=[ THE ACTUAL TUI STUFF ]=]--


-- Set terminal to raw mode
local function raw()
	x("stty raw -echo")
end


-- Revert terminal to normal
local function sane()
	x("stty sane")
end


-- Current width of the terminal
WIDTH = 0


-- Set WIDTH to the current terminal width
local function setWidth()
	local temp = io.popen("tput cols")
	WIDTH = temp:read("*n")
	if WIDTH % 2 ~= 0 then
		WIDTH = WIDTH - 1
	end
	temp:close()
	if WIDTH < 52 then
		print("shitty width")
		os.exit()
	end
end


-- Get the "range" of a page
-- For example, the page displaying entries 21 to 30
-- would have a range of 20. 31 to 40 would be 30, so on.
local function getNumRange(page	)
	local num
	for key, val in pairs(page) do
		num = tonumber(key)
		break
	end
	if num % 10 == 0 then
		return num - 10
	else
		return math.floor(num / 10) * 10
	end
end


-- Orders the entries of a page by number
-- Because the entry keys are numbers represented by
-- strings, pairs() wont parse through it in order.
-- This creates a new table, preserving the entry
-- number data and allowing it to be parsed in order
-- with ipairs().
local function orderVisualPage(page)
	local new = {}
	local range = getNumRange(page)
	local i = 1
	while i <= 10 do
		table.insert(new,
		{
			["number"] = tostring(range + i),
			["data"] = page[tostring(range + i)]
		})
		i = i + 1
	end
	return new
end


-- Write a basic horizontal line to the screen
-- Does not contain the outer TUI border
local function line()
	local lines = ""
	local i = 1
	while i <= (WIDTH - 2) do
		lines = lines .. "═"
		i = i + 1
	end
	return lines
end


-- Write the title of the TUI to the screen
local function title()
	clear()
	setWidth()
	if WIDTH < 54 then
		clear()
		print("Please make your terminal width wider than 54.")
		print("Current width: " .. WIDTH)
		os.exit()
	end
	local p = ""

	local i = 1
	while i <= (WIDTH - 54) / 2 do
		p = p .. " "
		i = i + 1
	end

	local logo = "" ..
"╔" .. line() ..                                                          "╗\n" ..
"║" ..p.. "      _____ _     _         _  _____                " ..p..    "║\n" ..
"║" ..p.. "     |_   _| |__ (_)_ __ __| || ____|   _  ___      " ..p..    "║\n" ..
"║" ..p.. "       | | | '_ \\| | '__/ _` ||  _|| | | |/ _ \\     " ..p..  "║\n" ..
"║" ..p.. "       | | | | | | | | | (_| || |__| |_| |  __/     " ..p..    "║\n" ..
"║" ..p.. "       |_| |_| |_|_|_|  \\__,_||_____\\__, |\\___|     " ..p.. "║\n" ..
"║" ..p.. "                                    |___/Search     " ..p..    "║\n" ..
"╠" .. line() ..                                                          "╣\n"

	io.write(logo)
end


-- Show the loading screen
local function loading(text)
	setWidth()

	local p = ""
	local ct = 1
	while ct <= (WIDTH  - #text - 8)  do
		p = p .. " "
		ct = ct + 1
	end

	title()
	io.write("║  " .. text .. "... " .. p .. "║\n╚" .. line() .. "╝\n")
end


-- This is kinda hard to explain, but has to do with
-- how much space to add after a string in the TUI
local function getStringPadding(num)
	local p = ""
	local i = 1
	while i <= WIDTH - num do
		p = p .. " "
		i = i + 1
	end
	return p
end


-- The currently open category and page
local CURRENTCATEGORY = 1
local CURRENTPAGE = 1


-- Display a page on the screen by ID
local function displayPage(pageID)
	setWidth()
	local orderedPage = orderVisualPage(PAGEDATABASE.categories[CURRENTCATEGORY].pages[pageID])
	io.write("║" .. line():gsub("═", " ") .. "║\n")
	io.write("║ " .. PAGEDATABASE.categories[CURRENTCATEGORY].name .. getStringPadding(#PAGEDATABASE.categories[CURRENTCATEGORY].name + 4) .. " ║\n")
	io.write("║ Page " .. tostring(pageID) .. " of " .. tostring(PAGEDATABASE.categories[CURRENTCATEGORY].pageCount) .. getStringPadding(#tostring(pageID) + #tostring(PAGEDATABASE.categories[CURRENTCATEGORY].pageCount) + 12) .. "║\n")
	io.write("║" .. line():gsub("═", " ") .. "║\n")
	for _,entry in ipairs(orderedPage) do
		local maxQueryWidth = WIDTH - 5 - #entry.number
		local queryToDisplay = ""
		if entry.data == nil then
			goto skip -- Skip this current iteration
		end
		if #entry.data.query > maxQueryWidth then
			local i = 1
			while i <= maxQueryWidth do
				queryToDisplay = queryToDisplay .. string.sub(entry.data.query, i, i)
				i = i + 1
			end
		else
			queryToDisplay = entry.data.query .. getStringPadding(#entry.data.query + 5 + #entry.number)

		end
		io.write("║ " .. entry.number .. " " .. queryToDisplay .. " ║\n")
		::skip:: -- Skip (see above comment)
	end

	io.write("║" .. line():gsub("═", " ") .. "║\n")
	local rightArrow = "  "
	if pageID < PAGEDATABASE.categories[CURRENTCATEGORY].pageCount then
		rightArrow = ">>"
	end
	local leftArrow = "  "
	if pageID > 1 then
		leftArrow = "<<"
	end
	io.write("║ " .. leftArrow .. getStringPadding(8) .. rightArrow .. " ║\n")
	io.write("╠" .. line() .. "╣\n")
	CURRENTPAGE = pageID
end


-- Go to the next left or right page
local function turnPage(dir)
	local nextPage = 0
	if dir == "right" then
		if CURRENTPAGE == PAGEDATABASE.categories[CURRENTCATEGORY].pageCount then
			nextPage = 1
		else
			nextPage = CURRENTPAGE + 1
		end
	elseif dir == "left" then
		if CURRENTPAGE == 1 then
			nextPage = PAGEDATABASE.categories[CURRENTCATEGORY].pageCount
		else
			nextPage = CURRENTPAGE - 1
		end
	end
	displayPage(nextPage)
end


-- Category page
local function categoryPage()
	setWidth()
	CURRENTPAGE = 0
	CURRENTCATEGORY = 0
	io.write("║" .. line():gsub("═", " ") .. "║\n")
	io.write("║ Categories:" .. getStringPadding(15) .. " ║\n")
	io.write("║" .. line():gsub("═", " ") .. "║\n")
	for number, category in ipairs(PAGEDATABASE.categories) do
		io.write("║ " .. tostring(number) .. " " .. category.name .. getStringPadding(#category.name + #tostring(number) + 5) .. " ║\n")
	end
	io.write("║" .. line():gsub("═", " ") .. "║\n")
	io.write("╠" .. line() .."╣\n")
end


-- Command bar
COMMANDINPUT = ""
local function commandBar(input)
	if (#COMMANDINPUT + #input) > (WIDTH - 22) then
		return
	end
	io.write("║ [ThirdEyeSearch]> " .. COMMANDINPUT .. input .. getStringPadding(#COMMANDINPUT + #input + 22) .. " ║\n")
	io.write("╚" .. line() .. "╝")
	COMMANDINPUT = COMMANDINPUT .. input
end





--[=[ FUNCTIONALITY ]=]--


-- Arrow keys
local arrows = {
    ["\27[D"] = "left",
    ["\27[C"] = "right"
}


-- Other pressable special keys
local other = {
	["\13"] = "enter",
	["\8"] = "back",
	["\127"] = "back"
}


-- Get a single key press in real time
local function getKeyPress()
	raw()
	while true do
		local c = io.read(1)
		if c:match("[a-zA-Z0-9]") ~= nil or c == " "then
			sane()
			return {
				["ctype"] = "char",
				["value"] = c
			}
		elseif other[c] then
			sane()
			return {
				["ctype"] = "other",
				["value"] = other[c]
			}
		else
			c = c .. io.read(2)
			sane()
			if arrows[c] then
				return {
					["ctype"] = "arrow",
					["value"] = arrows[c]
				}
			end
		end
	end
end


-- Throw a character at the command bar
-- This really exists only for backspace checking
local function typeCharToCmd(c)
	if c ~= "back" then
		commandBar(c)
	elseif #COMMANDINPUT >= 1 then
		COMMANDINPUT = string.sub(COMMANDINPUT, 1, #COMMANDINPUT - 1)
		commandBar("")
	end
end


-- Run the command stored in COMMANDINPUT
local function runCommand()
	local cargs = splitString(COMMANDINPUT)
	COMMANDINPUT = ""
	if cargs[1] == "open" and CURRENTCATEGORY == 0 then
		if cargs[2] and PAGEDATABASE.categories[tonumber(cargs[2])] then
			CURRENTCATEGORY = tonumber(cargs[2])
			title()
			displayPage(1)
			commandBar("")
		end
	elseif cargs[1] == "close" and CURRENTCATEGORY ~= 0 then
		title()
		categoryPage()
		commandBar("")
		CURRENTCATEGORY = 0
		CURRENTPAGE = 0
	end
end





--[=[ MAIN ]=]--
local function main()
	loading("ThirdEyeSearch is loading")
	extractDBtoPageFormat()
	setWidth()
	title()
	categoryPage()
	commandBar("")

	while true do
		local key = getKeyPress()

		if key.ctype == "char" then
			title()
			if CURRENTCATEGORY == 0 then
				categoryPage()
			else
				displayPage(CURRENTPAGE)
			end
			typeCharToCmd(key.value)
		elseif key.ctype == "arrow" then
			title()
			turnPage(key.value)
			commandBar("")
		elseif key.ctype == "other" then
			if key.value == "back" then
				title()
				if CURRENTCATEGORY == 0 then
                                	categoryPage()
                        	else
                                	displayPage(CURRENTPAGE)
				end
				typeCharToCmd("back")
			elseif key.value == "enter" then
				runCommand()
			end
		end
	end
end
main()
